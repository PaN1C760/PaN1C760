require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const bcrypt = require('bcrypt');
const cors = require('cors');
const bodyParser = require('body-parser');
const helmet = require('helmet');
const morgan = require('morgan');
const { body, validationResult } = require('express-validator');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.static(path.join(__dirname, 'public')));

mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/edu_platform')
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

const db = mongoose.connection;

app.use(helmet());
app.use(cors({ credentials: true, origin: process.env.CLIENT_ORIGIN }));
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(morgan('dev'));

app.use(session({
  secret: 'secretKey',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({ mongoUrl: 'mongodb://localhost:27017/edu_platform' }),
  cookie: { secure: false, httpOnly: true, maxAge: 1000 * 60 * 60 }
}));

// üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true, trim: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['teacher', 'student'], required: true },
  points: { type: Number, default: 0 },
  completedTests: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Test' }],
  subject: String,
  grades: [{ grade: Number, subject: String }]
});
const User = mongoose.model('User', UserSchema);

const TestSchema = new mongoose.Schema({
  title: String,
  questions: [{
    question: String,
    options: [String],
    correctAnswer: String,
    points: Number
  }],
  createdBy: String
});
const Test = mongoose.model('Test', TestSchema);

const notificationSchema = new mongoose.Schema({
  recipient: { type: String, required: true },  
  sender: { type: String, required: true }, 
  teacher: { type: String },
  student: { type: String },
  points: { type: Number },
  grade: { type: Number },
  subject: { type: String },
  type: { type: String, required: true },
  timestamp: { type: Date, default: Date.now }
});

const Notification = mongoose.model("Notification", notificationSchema);
module.exports = Notification;

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', [
  body('username').trim().isLength({ min: 3 }).withMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"),
  body('password').isLength({ min: 6 }).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"),
  body('role').isIn(['teacher', 'student']).withMessage("–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'teacher' –∏–ª–∏ 'student'")
], async (req, res) => {
  
  console.log("üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", req.body);

  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.log("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors.array());
    return res.status(400).json({ success: false, errors: errors.array() });
  }

  try {
    const { username, password, role } = req.body;

    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword, role });

    await user.save();
    res.json({ success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    req.session.user = { username: user.username, role: user.role, subject: user.subject || null };

    if (user.role === 'teacher') {
      if (!user.subject) {
        console.log("üî∏ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞");
        return res.json({ success: true, role: 'teacher', redirect: '/select_subject.html' });
      } else {
        console.log("üî∏ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è");
        return res.json({ success: true, role: 'teacher', redirect: '/teacher_dashboard.html' });
      }
    }

    console.log("üî∏ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞");
    res.json({ success: true, role: 'student', redirect: '/student_dashboard.html' });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
  
// üìå –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
app.post('/logout', (req, res) => {
  req.session.destroy(() => res.json({ success: true, message: '–í—ã –≤—ã—à–ª–∏' }));
});

// üìå –û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É (—É—á–µ–Ω–∏–∫) 
app.post('/exchange-points', async (req, res) => {
  if (!req.session.user || req.session.user.role !== 'student') {
    return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  }

  const { points, grade, subject } = req.body;
  const student = req.session.user.username;

  try {
    const studentUser = await User.findOne({ username: student });
    if (!studentUser || studentUser.points < points) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤' });
    }

    const teacherUser = await User.findOne({ subject, role: 'teacher' });
    if (!teacherUser) {
      return res.status(404).json({ message: '–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await User.updateOne({ username: student }, { $inc: { points: -points } });

    console.log("üë§ –£—á–∏—Ç–µ–ª—å:", teacherUser.username);

    const notification = new Notification({
      recipient: teacherUser.username,
      sender: student, 
      teacher: teacherUser.username,
      student: student,
      points: points,
      grade: grade,
      subject: subject,
      type: 'points_exchange'
    });

    console.log("üìå –°–æ–∑–¥–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", notification);
    await notification.save();
    
    res.json({ message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.get("/get-notifications", async (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ success: false, message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å" });
  }

  const username = req.session.user.username;

  try {
    const notifications = await Notification.find({ recipient: username }).sort({ timestamp: -1 });

    if (notifications.length === 0) {
      return res.json({ success: true, message: "–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", notifications: [] });
    }

    console.log("üì® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", notifications);
    res.json({ success: true, notifications });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—É—á–∏—Ç–µ–ª—å)
app.post('/resolve-notification', async (req, res) => {
  const { notificationId } = req.body;

  try {
    const notification = await Notification.findById(notificationId);
    if (!notification) {
      return res.status(404).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const studentNotification = new Notification({
      recipient: notification.student, // ‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
      sender: notification.teacher,    // ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å
      teacher: notification.teacher,
      student: notification.student,
      grade: notification.grade,
      subject: notification.subject,
      type: 'grade_assigned'
    });

    await studentNotification.save();
    await Notification.deleteOne({ _id: notificationId });

    res.json({ message: '–û—Ü–µ–Ω–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
app.get('/tests', async (req, res) => {
  if (!req.session.user) {
    return res.status(401).send('Unauthorized');
  }

  const tests = await Test.find();
  res.json(tests);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ ID
app.get('/test/:id', async (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ success: false, message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
  const test = await Test.findById(req.params.id);
  if (!test) {
    return res.status(404).json({ success: false, message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  res.json(test);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç
app.post('/take-test/:testId', async (req, res) => {
  if (!req.session.user || req.session.user.role !== 'student') {
      return res.status(403).json({ success: false, message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
  }

  const { answers } = req.body;
  const testId = req.params.testId;

  try {
      const test = await Test.findById(testId);
      if (!test) return res.status(404).json({ success: false, message: "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      let score = 0;
      test.questions.forEach((q, i) => {
          if (q.correctAnswer === answers[i]) {
              score += q.points;
          }
      });

      await User.updateOne({ username: req.session.user.username }, { $inc: { points: score } });

      res.json({ success: true, message: `–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${score} –±–∞–ª–ª–æ–≤!` });
  } catch (error) {
      console.error(error);
      res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}); 
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
app.post("/create-test", async (req, res) => {
    if (!req.session.user || req.session.user.role !== "teacher") {
        return res.status(403).json({ success: false, message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }

    const { title, questions } = req.body;
    const createdBy = req.session.user.username; 

    if (!title || !questions || !Array.isArray(questions) || questions.length === 0) {
        return res.status(400).json({ success: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    try {
        const newTest = new Test({ title, questions, createdBy }); 
        await newTest.save();
        res.json({ success: true, message: "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:", error);
        res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
// –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ —É—á–∏—Ç–µ–ª–µ–º
app.post('/save-subject', async (req, res) => {
  if (!req.session.user || req.session.user.role !== 'teacher') {
    return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  }

  try {
    const { subject } = req.body;
    if (!subject) {
      return res.status(400).json({ success: false, message: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    await User.updateOne({ username: req.session.user.username }, { subject });

    req.session.user.subject = subject;

    res.json({ success: true, message: '–ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω', redirect: '/teacher_dashboard.html' });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-points', async (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ success: false, message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
  const user = await User.findOne({ username: req.session.user.username });
  res.json({ points: user.points });
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/user-info', (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ success: false, message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }
    res.json({ success: true, role: req.session.user.role, subject: req.session.user.subject });
});
// –†–æ—É—Ç–∏–Ω–≥ –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
app.get('/', (req, res) => res.sendFile(__dirname + '/public/index.html'));
app.get('/teacher_dashboard.html', (req, res) => res.sendFile(__dirname + '/public/teacher_dashboard.html'));
app.get('/student_dashboard.html', (req, res) => res.sendFile(__dirname + '/public/student_dashboard.html'));
app.get('/select_subject.html', (req, res) => res.sendFile(__dirname + '/public/select_subject.html'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
