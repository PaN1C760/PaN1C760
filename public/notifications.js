let controller = new AbortController();
const notificationsContainer = document.getElementById("notifications-container");

async function fetchNotifications() {
    try {
        if (controller) controller.abort();
        controller = new AbortController();

        const response = await fetch("/get-notifications", {
            method: "GET",
            credentials: "include",
            signal: controller.signal
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const data = await response.json();
        console.log("üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", data.notifications);

        notificationsContainer.innerHTML = "";

        if (!data.notifications || data.notifications.length === 0) {
            notificationsContainer.innerHTML = '<p class="no-notifications">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
            return;
        }

        data.notifications.forEach(notification => {
            const div = document.createElement("div");
            div.className = "notification";

            if (notification.type === "points_exchange") {
                div.textContent = `–£—á–µ–Ω–∏–∫ ${notification.sender} –æ–±–º–µ–Ω—è–ª ${notification.points} –±–∞–ª–ª–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É: ${notification.grade} –ø–æ ${notification.subject}`;

                const confirmBtn = document.createElement("button");
                confirmBtn.className = "confirm-btn";
                confirmBtn.textContent = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å";
                confirmBtn.onclick = async () => {
                    try {
                        const response = await fetch("/resolve-notification", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ notificationId: notification._id }),
                            credentials: "include"
                        });

                        if (!response.ok) {
                            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                        }

                        fetchNotifications();
                    } catch (error) {
                        alert(error.message);
                    }
                };

                div.appendChild(confirmBtn);
            } else if (notification.type === "grade_assigned") {
                div.textContent = `–£—á–∏—Ç–µ–ª—å ${notification.sender} –≤—ã—Å—Ç–∞–≤–∏–ª –≤–∞–º –æ—Ü–µ–Ω–∫—É: ${notification.grade} –ø–æ ${notification.subject}`;

                const deleteBtn = document.createElement("button");
                deleteBtn.className = "delete-btn";
                deleteBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
                deleteBtn.onclick = async () => {
                    div.remove();
                };

                div.appendChild(deleteBtn);
            }

            notificationsContainer.appendChild(div);
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
        notificationsContainer.innerHTML = '<p class="no-notifications">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const intervalId = setInterval(fetchNotifications, 10000);

// –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("beforeunload", () => clearInterval(intervalId));

// –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fetchNotifications();